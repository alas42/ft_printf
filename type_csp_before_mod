# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    type_csp_before_mod                                :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: avogt <avogt@student.42.fr>                +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2019/09/16 14:14:14 by avogt             #+#    #+#              #
#    Updated: 2020/06/19 16:36:41 by avogt            ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

#include "ft_printf.h"

char	*ft_type_c(int *attr, int champ, va_list ap)
{
	char	*s;
	char	c;
	int		i;

	i = 0;
	s = NULL;
	c = (char)va_arg(ap, int);
	s = (champ > 1) ? ft_strnew(champ) : ft_strnew(1);
	if (!attr[0] && champ > 1)
		while (i++ < champ - 1)
			s[i] = ' ';
	s[i++] = c;
	if (attr[0] && champ > 1)
		while (i++ < champ - 1)
			s[i] = ' ';
	return (s);
}

char	*ft_type_s(int *attr, int champ, int prec, va_list ap)
{
	char	*s;
	char	*result;
	int		length_result;
	int		length_s;
	int		i;

	i = -1;
	result = NULL;
	s = va_arg(ap, char *);
	length_s = ft_strlen(s);
	if (prec < 0 || prec >= length_s)
		length_result = (champ >= length_s) ? champ : length_s;
	else
		length_result = (champ >= length_s) ? champ - (length_s - prec) : prec;
	prec = (prec < 0 || prec >= length_s) ? length_s : prec;
	s = (prec < length_s) ? ft_strsub(s, 0, prec) : s;
	result = ft_strnew(length_result);
	if (!attr[0] && champ > length_result)
		while (++i < champ - length_result)
			result[i] = ' ';
	result = ft_strcat(result, s);
	if (attr[0] && champ > length_result)
		while (++i < champ - length_result)
			result[i] = ' ';
	return (result);
}
/*
char	*ft_type_p(int *attr, int champ, int prec, va_list ap)
{
	char				*s;
//	void				*ptr;
//	unsigned long int	value;
	char				*result;
	int					length_result;
	int					param[4];

	result = ft_convert_base_l((unsigned long int)va_arg(ap, void *), 16);
	//length_result = ft_strlen(result) + 2;
	param[0] = champ;
	param[1] = prec;
	param[2] = ft_strlen(result) + 2;
	param[3] = 0;
//	i = 0;
//	j = 0;
	// if ((s = get_string_p(param, attr, result)) != NULL)
	// 	return (s);
	// else
	// 	return (NULL);
	// if (champ >= prec + 2 && champ > length_result)
	// 	s = ft_strnew(champ);
	// else if (champ < prec + 2 && prec + 2 > length_result)
	// 	s = ft_strnew(prec + 2);
	// else
	// 	s = ft_strnew(length_result);
	//c = 0;
	if (!attr[0])
	{
		// if (prec < length_result - 2)
		// 	c = champ - (length_result - 2);
		// else
		// 	c = champ - (prec + 2);
		if (c > 0)
			while (i < c)
			{
				if (attr[1] && prec == -1)
				{
					if (i == 0)
					{
						s[i++] = '0';
						s[i] = 'x';
						j = j + 2;
					}
					else
						s[i] = '0';
				}
				else
					s[i] = ' ';
				i++;
			}
	}
	if (j == 0)
	{
		s[i++] = '0';
		s[i++] = 'x';
		j = j + 2;
	}
	j = (c > 0) ? j + c : j;
	c = -1;
	while (++c < prec - (length_result - 2))
	{
		s[j + c] = '0';
		i++;
	}
	j = 0;
	ft_strlow(result);
	while (j < length_result - 2)
		s[i++] = result[j++];
	if (attr[0])
		if (champ > length_result)
			while (i < champ)
				s[i++] = ' ';
	return (s);
}
